services:
  # Service 1 : Le serveur MCP pour l'API data.inclusion
  mcp_server:
    build: .
    command: python -m src.mcp.server
    env_file:
      - .env
    ports:
      - "8000:8000" # Mappe le port 8000 de l'hôte au conteneur
    volumes:
      - ./src:/app/src # Synchronise le code pour le développement
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s  # Augmenté de 10s à 30s pour laisser plus de temps au serveur
      timeout: 5s
      retries: 5
      start_period: 60s  # Augmenté de 30s à 60s pour un démarrage plus robuste
    networks:
      - app-network

  # Service 2 : Le serveur Agent qui communique avec le frontend et le MCP
  agent_server:
    build: .
    command: python main.py
    env_file:
      - .env
    ports:
      - "8001:8001" # Mappe le port 8001 de l'hôte au conteneur
    volumes:
      - ./src:/app/src
    restart: on-failure  # Redémarre automatiquement en cas d'échec
    environment:
      - MCP_CONNECTION_RETRY_DELAY=5  # Délai entre les tentatives de connexion MCP
    networks:
      - app-network
    depends_on:
      mcp_server:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Service 3 : Serveur Redis pour le broker et stockage persistant
  redis:
    image: redis:alpine
    ports:
      - "6379:6379" # Mappe le port 6379 de l'hôte au conteneur
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

networks:
  app-network:
    driver: bridge 