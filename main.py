#!/usr/bin/env python3
"""
Point d'entr√©e principal pour l'application Agent DataInclusion int√©gr√©e.

Ce script lance l'application web combin√©e qui expose :
- L'agent IA d'inclusion sociale via FastAPI (/api/*)
- L'interface Gradio moderne (/chat/*)
- Documentation interactive (/docs)
- Health checks (/health)

L'application utilise l'architecture FastAPI + Gradio pour offrir
une exp√©rience utilisateur compl√®te et une API programmatique.
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire src au path Python
try:
    import uvicorn
    from src.core.config import settings
    from src.core.logging import setup_logging
    from src.gradio_app import app

    # Configuration centralis√©e du logging pour l'application agent/UI
    logger = setup_logging(name="datainclusion.agent")

    def setup_environment():
        """
        Prepares the application environment by creating required directories and validating critical configuration settings.
        
        Returns:
            The agent settings object after environment setup and validation.
        """
        # Cr√©er les r√©pertoires n√©cessaires
        directories = ["logs", "feedback_data", "exports", "static"]

        for directory in directories:
            Path(directory).mkdir(exist_ok=True)
            logger.info(f"üìÅ R√©pertoire cr√©√©/v√©rifi√©: {directory}")

        # Avertissements pour la configuration
        if settings.agent.SECRET_KEY == "your-secret-key-here-change-in-production":
            logger.warning(
                "‚ö†Ô∏è SECRET_KEY utilise la valeur par d√©faut - √† changer en production !"
            )

        if settings.agent.CORS_ORIGINS == ["*"]:
            logger.warning(
                "‚ö†Ô∏è CORS_ORIGINS autorise tous les domaines - √† restreindre en production !"
            )

        if not settings.agent.OPENAI_API_KEY:
            logger.warning(
                "‚ö†Ô∏è OPENAI_API_KEY non d√©finie - certaines fonctionnalit√©s peuvent ne pas fonctionner"
            )

        logger.info("‚úÖ Configuration de l'environnement termin√©e")
        return settings.agent

    def run_app():
        """
        Start the integrated Agent DataInclusion application in either development or production mode.
        
        Determines the environment mode from the ENVIRONMENT variable, prepares the runtime environment, and launches the FastAPI and Gradio application with appropriate settings for development (with auto-reload) or production (single worker, no reload).
        """
        agent_settings = setup_environment()

        # D√©terminer le mode d'ex√©cution
        environment = os.getenv("ENVIRONMENT", "production").lower()
        is_development = environment == "development"

        if is_development:
            logger.info("üîß D√©marrage de l'application en mode D√âVELOPPEMENT")
            logger.info("üìã Configuration:")
            logger.info("   - Host: 0.0.0.0")
            logger.info(f"   - Port: {agent_settings.AGENT_PORT}")
            logger.info("   - Auto-reload: Activ√©")
            logger.info(
                f"   - Interface Gradio: http://localhost:{agent_settings.AGENT_PORT}/chat"
            )
            logger.info(
                f"   - API Agent: http://localhost:{agent_settings.AGENT_PORT}/api"
            )
            logger.info(
                f"   - Documentation: http://localhost:{agent_settings.AGENT_PORT}/docs"
            )
            logger.info(
                f"   - Health Check: http://localhost:{agent_settings.AGENT_PORT}/health"
            )

            uvicorn.run(
                "src.gradio_app:app",
                host="0.0.0.0",
                port=agent_settings.AGENT_PORT,
                reload=True,
                reload_dirs=["src", "static"],
                reload_excludes=[
                    "*.pyc",
                    "__pycache__",
                    "*.log",
                    "feedback_data",
                    "exports",
                ],
                log_level="info",
                access_log=True,
                use_colors=True,
            )
        else:
            logger.info("üöÄ D√©marrage de l'application en mode PRODUCTION")
            logger.info("üìã Configuration:")
            logger.info("   - Host: 0.0.0.0")
            logger.info(f"   - Port: {agent_settings.AGENT_PORT}")
            logger.info(
                f"   - Interface Gradio: http://localhost:{agent_settings.AGENT_PORT}/chat"
            )
            logger.info(
                f"   - API Agent: http://localhost:{agent_settings.AGENT_PORT}/api"
            )
            logger.info(
                f"   - Documentation: http://localhost:{agent_settings.AGENT_PORT}/docs"
            )
            logger.info(
                f"   - Health Check: http://localhost:{agent_settings.AGENT_PORT}/health"
            )

            uvicorn.run(
                app,
                host="0.0.0.0",
                port=agent_settings.AGENT_PORT,
                log_level="info",
                access_log=True,
                reload=False,
                workers=1,  # Gradio ne supporte pas bien les workers multiples
            )

    if __name__ == "__main__":
        """
        Point d'entr√©e du script.
        
        Variables d'environnement support√©es :
        - ENVIRONMENT : "production" ou "development" (d√©faut: production)
        - AGENT_PORT : Port d'√©coute (d√©faut: 8001)
        - OPENAI_API_KEY : Cl√© API OpenAI (requis)
        - SECRET_KEY : Cl√© secr√®te pour les sessions (√† changer en production)
        - CORS_ORIGINS : Domaines autoris√©s pour CORS (s√©par√©s par virgules)
        """
        try:
            run_app()

        except KeyboardInterrupt:
            logger.info("üëã Arr√™t demand√© par l'utilisateur")
            print("\nGoodbye!")
        except Exception as e:
            logger.error(f"üí• Erreur fatale lors du d√©marrage: {e}")
            print(f"Failed to start server: {e}")
            sys.exit(1)

except ImportError as e:
    print(f"‚ùå Erreur d'importation: {e}")
    print("üí° Assurez-vous que toutes les d√©pendances sont install√©es:")
    print("   uv pip install --system -r pyproject.toml")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå Erreur inattendue: {e}")
    sys.exit(1)
