"""
Gestionnaire de cycle de vie pour l'application FastAPI.

Ce module contient la fonction de cycle de vie qui g√®re l'initialisation
et la finalisation de l'application FastAPI avec l'agent IA.
"""

import asyncio
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI
import httpx  # Import httpx

# Imports locaux
from .config import settings
from ..db.session import initialize_database

# Configuration du logging
logger = logging.getLogger("datainclusion.agent")


def setup_environment():
    """
    Configure l'environnement d'ex√©cution de l'application.

    Cette fonction :
    - Affiche les avertissements de configuration
    - Valide les param√®tres critiques
    """
    logger.info("üîß Configuration de l'environnement...")

    # Avertissements pour la configuration
    if settings.agent.SECRET_KEY == "your-secret-key-here-change-in-production":
        logger.warning(
            "‚ö†Ô∏è SECRET_KEY utilise la valeur par d√©faut - √† changer en production !"
        )

    if settings.agent.CORS_ORIGINS == ["*"]:
        logger.warning(
            "‚ö†Ô∏è CORS_ORIGINS autorise tous les domaines - √† restreindre en production !"
        )

    if not settings.agent.OPENAI_API_KEY:
        logger.warning(
            "‚ö†Ô∏è OPENAI_API_KEY non d√©finie - certaines fonctionnalit√©s peuvent ne pas fonctionner"
        )

    logger.info("‚úÖ Configuration de l'environnement termin√©e")


@asynccontextmanager
async def lifespan(_app: FastAPI):
    """
    Gestionnaire de cycle de vie pour l'application combin√©e.

    G√®re la connexion au serveur MCP et l'initialisation de l'agent
    avec logique de retry et backoff exponentiel.

    Args:
        _app: Instance FastAPI (renamed to _app as it's not directly used)
    """
    logger.info("üöÄ D√©marrage de l'application Chainlit + FastAPI...")

    # Configuration de l'environnement
    setup_environment()

    # Initialisation de la base de donn√©es
    try:
        await initialize_database()
        logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
    except Exception as e:
        logger.critical("‚ùå √âchec de l'initialisation de la base de donn√©es: %s", e)
        raise RuntimeError(
            f"L'application ne peut pas d√©marrer sans base de donn√©es: {e}"
        ) from e

    # Logique de connexion au MCP avec retry et backoff exponentiel
    max_retries = settings.agent.AGENT_MCP_CONNECTION_MAX_RETRIES
    base_delay = settings.agent.AGENT_MCP_CONNECTION_BASE_DELAY
    backoff_multiplier = settings.agent.AGENT_MCP_CONNECTION_BACKOFF_MULTIPLIER

    for attempt in range(max_retries):
        try:
            health_check_url = (
                f"http://mcp_server:{settings.mcp_gateway.MCP_PORT}/health"
            )
            async with httpx.AsyncClient() as client:
                response = await client.get(health_check_url)
                response.raise_for_status()  # L√®ve une exception pour les codes d'√©tat 4xx/5xx

            logger.info("‚úÖ MCP Gateway is healthy and reachable.")

            # Application pr√™te
            yield

            # Code apr√®s yield s'ex√©cute lors du shutdown
            break

        except httpx.HTTPStatusError as e:
            if attempt == max_retries - 1:
                raise RuntimeError(
                    f"√âchec de la connexion au serveur MCP apr√®s {max_retries} tentatives: {e.response.status_code} - {e.response.text}"
                ) from e
            delay = base_delay * (backoff_multiplier**attempt)
            logger.warning(
                "Tentative %d/%d √©chou√©e (HTTP Status: %s). Nouvelle tentative dans %.2fs...",
                attempt + 1,
                max_retries,
                e.response.status_code,
                delay,
            )
            await asyncio.sleep(delay)
        except httpx.RequestError as e:
            if attempt == max_retries - 1:
                raise RuntimeError(
                    f"√âchec de la connexion au serveur MCP apr√®s {max_retries} tentatives: {e}"
                ) from e
            delay = base_delay * (backoff_multiplier**attempt)
            logger.warning(
                "Tentative %d/%d √©chou√©e (Request Error: %s). Nouvelle tentative dans %.2fs...",
                attempt + 1,
                max_retries,
                e,
                delay,
            )
            await asyncio.sleep(delay)
        except Exception as e:
            if attempt == max_retries - 1:
                # Derni√®re tentative √©chou√©e
                raise e
            # Calcul du d√©lai avec backoff exponentiel
            delay = base_delay * (backoff_multiplier**attempt)

            logger.warning(
                "Tentative %d/%d √©chou√©e. Nouvelle tentative dans %.2fs...",
                attempt + 1,
                max_retries,
                delay,
            )
            await asyncio.sleep(delay)

    # Nettoyage lors du shutdown
    logger.info("üõë Arr√™t de l'application...")
    logger.info("‚úÖ Nettoyage termin√©")
