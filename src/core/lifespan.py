"""
Gestionnaire de cycle de vie pour l'application FastAPI.

Ce module contient la fonction de cycle de vie qui g√®re l'initialisation
et la finalisation de l'application FastAPI avec l'agent IA.
"""

import asyncio
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI
from pydantic_ai.mcp import MCPServerStreamableHTTP

# Imports locaux
from .config import settings
from src.agent.agent import create_agent_from_profile
from src.core.profiles import AGENT_PROFILES
from ..db.session import initialize_database

# Configuration du logging
logger = logging.getLogger("datainclusion.agent")


def setup_environment():
    """
    Configure l'environnement d'ex√©cution de l'application.

    Cette fonction :
    - Affiche les avertissements de configuration
    - Valide les param√®tres critiques
    """
    logger.info("üîß Configuration de l'environnement...")

    # Avertissements pour la configuration
    if settings.agent.SECRET_KEY == "your-secret-key-here-change-in-production":
        logger.warning(
            "‚ö†Ô∏è SECRET_KEY utilise la valeur par d√©faut - √† changer en production !"
        )

    if settings.agent.CORS_ORIGINS == ["*"]:
        logger.warning(
            "‚ö†Ô∏è CORS_ORIGINS autorise tous les domaines - √† restreindre en production !"
        )

    if not settings.agent.OPENAI_API_KEY:
        logger.warning(
            "‚ö†Ô∏è OPENAI_API_KEY non d√©finie - certaines fonctionnalit√©s peuvent ne pas fonctionner"
        )

    logger.info("‚úÖ Configuration de l'environnement termin√©e")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestionnaire de cycle de vie pour l'application combin√©e.

    G√®re la connexion au serveur MCP et l'initialisation de l'agent
    avec logique de retry et backoff exponentiel.

    Args:
        app: Instance FastAPI
    """
    logger.info("üöÄ D√©marrage de l'application Chainlit + FastAPI...")

    # Configuration de l'environnement
    setup_environment()

    # Initialisation de la base de donn√©es
    try:
        await initialize_database()
        logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
    except Exception as e:
        logger.critical(f"‚ùå √âchec de l'initialisation de la base de donn√©es: {e}")
        raise RuntimeError(
            f"L'application ne peut pas d√©marrer sans base de donn√©es: {e}"
        )

    # Cr√©ation de l'agent avec le profil par d√©faut
    profile = AGENT_PROFILES["social_agent"]
    agent = create_agent_from_profile(profile)

    # Logique de connexion au MCP avec retry et backoff exponentiel
    max_retries = settings.agent.AGENT_MCP_CONNECTION_MAX_RETRIES
    base_delay = settings.agent.AGENT_MCP_CONNECTION_BASE_DELAY
    backoff_multiplier = settings.agent.AGENT_MCP_CONNECTION_BACKOFF_MULTIPLIER

    for attempt in range(max_retries):
        try:
            async with agent.run_mcp_servers():
                # Stocker l'instance de l'agent dans l'√©tat de l'application
                app.state.agent = agent

                logger.info("‚úÖ Application initialis√©e avec succ√®s")

                # Application pr√™te
                yield

                # Code apr√®s yield s'ex√©cute lors du shutdown
                break

        except Exception as e:
            if attempt == max_retries - 1:
                # Derni√®re tentative √©chou√©e
                raise RuntimeError(
                    f"√âchec de la connexion au serveur MCP apr√®s {max_retries} tentatives: {e}"
                )

            # Calcul du d√©lai avec backoff exponentiel
            delay = base_delay * (backoff_multiplier**attempt)

            logger.warning(
                f"Tentative {attempt + 1}/{max_retries} √©chou√©e. "
                f"Nouvelle tentative dans {delay:.2f}s..."
            )
            await asyncio.sleep(delay)

    # Nettoyage lors du shutdown
    logger.info("üõë Arr√™t de l'application...")
    logger.info("‚úÖ Nettoyage termin√©")
