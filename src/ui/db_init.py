"""
Module d'initialisation de la base de donn√©es PostgreSQL pour Chainlit.

Ce module fournit une fonction pour cr√©er le sch√©ma requis par la couche de donn√©es
SQLAlchemy de Chainlit. Il d√©finit les mod√®les SQLAlchemy correspondant aux tables
users, threads, steps, elements, et feedbacks avec les bonnes relations et contraintes.

Usage:
    from src.ui.db_init import initialize_database

    await initialize_database()

Fonctionnalit√©s:
    - Mod√®les SQLAlchemy d√©claratifs pour toutes les tables Chainlit
    - Cr√©ation idempotente du sch√©ma avec create_all()
    - Support des types PostgreSQL (UUID, JSONB, ARRAY)
    - Relations de cl√©s √©trang√®res avec suppression en cascade
    - Logging d√©taill√© du processus d'initialisation
"""

import logging
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy.orm import declarative_base, relationship
from sqlalchemy import (
    Column, String, Boolean, Integer, Text, 
    UUID, ARRAY, ForeignKey
)
from sqlalchemy.dialects.postgresql import JSONB
from src.core.config import settings

# Base d√©clarative pour tous les mod√®les
Base = declarative_base()


class User(Base):
    """Mod√®le SQLAlchemy pour la table users de Chainlit."""
    __tablename__ = "users"
    
    id = Column(UUID, primary_key=True)
    identifier = Column(Text, nullable=False, unique=True)
    user_metadata = Column("metadata", JSONB, nullable=False)  # √âvite le conflit avec Base.metadata
    createdAt = Column(Text)
    
    # Relations
    threads = relationship("Thread", back_populates="user", cascade="all, delete-orphan")


class Thread(Base):
    """Mod√®le SQLAlchemy pour la table threads de Chainlit."""
    __tablename__ = "threads"
    
    id = Column(UUID, primary_key=True)
    createdAt = Column(Text)
    name = Column(Text)
    userId = Column(UUID, ForeignKey("users.id", ondelete="CASCADE"))
    userIdentifier = Column(Text)
    tags = Column(ARRAY(Text))
    thread_metadata = Column("metadata", JSONB)  # √âvite le conflit avec Base.metadata
    
    # Relations
    user = relationship("User", back_populates="threads")
    steps = relationship("Step", back_populates="thread", cascade="all, delete-orphan")
    elements = relationship("Element", back_populates="thread", cascade="all, delete-orphan")
    feedbacks = relationship("Feedback", back_populates="thread", cascade="all, delete-orphan")


class Step(Base):
    """Mod√®le SQLAlchemy pour la table steps de Chainlit."""
    __tablename__ = "steps"
    
    id = Column(UUID, primary_key=True)
    name = Column(Text, nullable=False)
    type = Column(Text, nullable=False)
    threadId = Column(UUID, ForeignKey("threads.id", ondelete="CASCADE"), nullable=False)
    parentId = Column(UUID)
    streaming = Column(Boolean, nullable=False)
    waitForAnswer = Column(Boolean)
    isError = Column(Boolean)
    step_metadata = Column("metadata", JSONB)  # √âvite le conflit avec Base.metadata
    tags = Column(ARRAY(Text))
    input = Column(Text)
    output = Column(Text)
    createdAt = Column(Text)
    command = Column(Text)
    start = Column(Text)
    end = Column(Text)
    generation = Column(JSONB)
    showInput = Column(Text)
    language = Column(Text)
    indent = Column(Integer)
    defaultOpen = Column(Boolean, default=False)
    
    # Relations
    thread = relationship("Thread", back_populates="steps")


class Element(Base):
    """Mod√®le SQLAlchemy pour la table elements de Chainlit."""
    __tablename__ = "elements"
    
    id = Column(UUID, primary_key=True)
    threadId = Column(UUID, ForeignKey("threads.id", ondelete="CASCADE"))
    type = Column(Text)
    url = Column(Text)
    chainlitKey = Column(Text)
    name = Column(Text, nullable=False)
    display = Column(Text)
    objectKey = Column(Text)
    size = Column(Text)
    page = Column(Integer)
    language = Column(Text)
    forId = Column(UUID)
    mime = Column(Text)
    props = Column(JSONB)
    
    # Relations
    thread = relationship("Thread", back_populates="elements")


class Feedback(Base):
    """Mod√®le SQLAlchemy pour la table feedbacks de Chainlit."""
    __tablename__ = "feedbacks"
    
    id = Column(UUID, primary_key=True)
    forId = Column(UUID, nullable=False)
    threadId = Column(UUID, ForeignKey("threads.id", ondelete="CASCADE"), nullable=False)
    value = Column(Integer, nullable=False)
    comment = Column(Text)
    
    # Relations
    thread = relationship("Thread", back_populates="feedbacks")


async def initialize_database():
    """
    Initialise la base de donn√©es PostgreSQL avec le sch√©ma requis par Chainlit.

    Cette fonction cr√©e toutes les tables n√©cessaires pour la persistance des donn√©es
    Chainlit en utilisant les mod√®les SQLAlchemy d√©claratifs. Elle utilise create_all()
    pour une cr√©ation idempotente et s√ªre du sch√©ma.

    La fonction utilise une connexion asynchrone pour garantir la coh√©rence des
    op√©rations d'initialisation et s'assure que toutes les relations et contraintes
    sont correctement d√©finies.

    Raises:
        Exception: Si l'initialisation de la base de donn√©es √©choue
    """
    logger = logging.getLogger(__name__)
    logger.info(
        "üöÄ D√©but de l'initialisation de la base de donn√©es PostgreSQL pour Chainlit (SQLAlchemy)"
    )

    try:
        # R√©cup√©ration de l'URL de la base de donn√©es depuis la configuration
        database_url = settings.agent.DATABASE_URL
        logger.info(
            f"üîó Connexion √† la base de donn√©es : {database_url.split('@')[1] if '@' in database_url else 'URL masqu√©e'}"
        )

        # Cr√©ation du moteur de base de donn√©es asynchrone
        engine = create_async_engine(database_url, echo=False)

        logger.info("üìã Cr√©ation du sch√©ma de base de donn√©es avec les mod√®les SQLAlchemy...")
        
        # Cr√©ation de toutes les tables de mani√®re idempotente
        # create_all() v√©rifie automatiquement l'existence des tables (√©quivalent √† IF NOT EXISTS)
        async with engine.begin() as conn:
            # Ex√©cution de create_all pour cr√©er toutes les tables d√©finies dans Base
            await conn.run_sync(Base.metadata.create_all)
            
            logger.info("‚úÖ Sch√©ma de base de donn√©es cr√©√© avec succ√®s")
            logger.info("üìä Tables cr√©√©es ou v√©rifi√©es :")
            logger.info("  ‚úì users - Gestion des utilisateurs avec authentification")
            logger.info("  ‚úì threads - Conversations de chat avec m√©tadonn√©es")
            logger.info("  ‚úì steps - √âtapes de conversation et streaming")
            logger.info("  ‚úì elements - √âl√©ments multim√©dias et fichiers")
            logger.info("  ‚úì feedbacks - Syst√®me de retours utilisateurs")
            logger.info("üîó Relations et contraintes :")
            logger.info("  ‚úì Cl√©s √©trang√®res avec suppression en cascade")
            logger.info("  ‚úì Index et contraintes d'unicit√©")
            logger.info("  ‚úì Types PostgreSQL (UUID, JSONB, ARRAY)")

        # Fermeture propre du moteur
        await engine.dispose()
        logger.info("üéØ Initialisation de la base de donn√©es termin√©e avec succ√®s")

    except Exception as e:
        logger.error(
            f"‚ùå Erreur lors de l'initialisation de la base de donn√©es : {str(e)}"
        )
        logger.error(
            "üîç V√©rifiez que PostgreSQL est accessible et que les param√®tres de connexion sont corrects"
        )
        logger.error(
            "üí° Assurez-vous que l'utilisateur a les permissions CREATE sur la base de donn√©es"
        )
        raise e


# Export des mod√®les pour utilisation dans d'autres modules si n√©cessaire
__all__ = ["initialize_database", "Base", "User", "Thread", "Step", "Element", "Feedback"]
