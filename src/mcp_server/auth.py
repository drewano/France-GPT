"""
Authentication module for the DataInclusion MCP Server.

This module handles the configuration and setup of authentication
for the MCP server, including Bearer token authentication.
"""

import logging
from fastmcp.server.auth import BearerAuthProvider
from fastmcp.server.auth.providers.bearer import RSAKeyPair
from cryptography.hazmat.primitives import serialization

from ..core.config import settings


def setup_authentication(logger: logging.Logger, audience: str) -> BearerAuthProvider | None:
    """
    Configure l'authentification Bearer pour le serveur MCP.

    Cette fonction :
    1. Lit la cl√© secr√®te depuis la configuration
    2. Configure BearerAuthProvider si une cl√© est fournie
    3. G√©n√®re un token de test pour le d√©veloppement

    Args:
        logger: Instance du logger pour enregistrer les messages
        audience: The audience for the Bearer token.

    Returns:
        BearerAuthProvider | None: Le provider d'authentification ou None
    """
    logger.info("Configuring server authentication...")

    # Lecture de la cl√© secr√®te depuis la configuration
    secret_key = settings.agent.SECRET_KEY

    if secret_key and secret_key.strip():
        logger.info("Secret key found - configuring Bearer Token authentication...")
        try:
            # Si la cl√© ressemble √† une cl√© RSA priv√©e PEM, l'utiliser directement
            if secret_key.strip().startswith("-----BEGIN") and "PRIVATE KEY" in str(
                secret_key
            ):
                # Utiliser la cl√© priv√©e pour cr√©er une paire de cl√©s
                private_key = serialization.load_pem_private_key(
                    secret_key.encode(), password=None
                )
                public_key_pem = (
                    private_key.public_key()
                    .public_bytes(
                        encoding=serialization.Encoding.PEM,
                        format=serialization.PublicFormat.SubjectPublicKeyInfo,
                    )
                    .decode()
                )

                auth_provider = BearerAuthProvider(
                    public_key=public_key_pem, audience=audience
                )
            else:
                # Utiliser la cl√© comme seed pour g√©n√©rer une paire de cl√©s d√©terministe
                # Pour des raisons de simplicit√©, on g√©n√®re une nouvelle paire de cl√©s
                key_pair = RSAKeyPair.generate()

                auth_provider = BearerAuthProvider(
                    public_key=key_pair.public_key,
                    audience=audience,
                )

                # Log du token de test (UNIQUEMENT pour le d√©veloppement)
                test_token = key_pair.create_token(
                    audience=audience,
                    subject="test-user",
                    expires_in_seconds=3600,
                )
                logger.info(f"üîë Test Bearer Token (for development): {test_token}")

            logger.info("‚úì Bearer Token authentication configured successfully")
            logger.info(f"   - Audience: {audience}")
            logger.info("   - Server will require valid Bearer tokens for access")
            return auth_provider

        except Exception as e:
            logger.error(f"Failed to configure authentication: {e}")
            logger.warning("Continuing without authentication...")
            return None
    else:
        logger.warning(
            "MCP_SERVER_SECRET_KEY not set - server will run WITHOUT authentication"
        )
        logger.warning("‚ö†Ô∏è  All clients will have unrestricted access to the server")
        return None
